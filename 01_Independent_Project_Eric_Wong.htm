<!DOCTYPE html>
<html>
	<head></head>
	<body>
		<!-- 
			Type a Title below using a h1 tag. 
			e.g. 01.01 Average (simple) Joe Bloggs	
		-->
		
		<h1>01 Independent Project Points Deductor Eric Wong</h1>
		
		<!-- Type short instructions below using a p tag. -->
		
		<p>Purpose & Start Instructions</p>
		<ul>
			<li>There are in total of 13 students in the AM CS Elective. People like me love chatting on teams</li>
			<li>However Mr. Lee hated students chatting in teams.</li>
			<li>This tool remove student's classwork grade and will recalculate their average score for each score remove.</li>
			<li>To Calculate:</li>
			<ol style="list-style-type: upper-roman">
				<li></li>
			</ol>
		</ul>
		
		<!--
			Enter short labels using p tags and input boxes below
			(also use br tags to create new lines if necessary).
		-->
		
		<p>Enter the total amount of classworks:</p>
		<input type = "number" min="0" id = "inpWorks">

		
		<p>Select a student:</p>
		<select name = "students" id = "opStudents">
			<option value="David">David</option>
			<option value="Eric">Eric</option>
			<option value="Vincent">Vincent</option>
		</select>

		<p>Enter the total amount of times chatted:</p>
		<input type = "number" min="0" id = "inpChats" disabled>
		
		<!-- Enter buttons which call functions below. -->
		
		<!-- Enter h3/h2 tags for the result/s below. -->
		
		<h3>The students' current average grade:</h3>
		<p id = "workAmount">There are currently no classworks. Enter the amount of classworks to begin.</p>
		<ul id = "ulScore">
			<li id = "scoreDavid">David: Enter the amount of classworks</li>
			<li id = "scoreEric">Eric: Enter the amount of classworks</li>
			<li id = "scoreVincent">Vincent: Enter the amount of classworks</li>
		</ul>
		
		<script>
			
			/* 
				Type JavaScript code and functions below.
				I prefer a function name to start with calc if
				calculates something.
			*/

			// Run when loaded
			let fails = {"David": 0, "Eric": 0, "Vincent": 0}
			let students = Object.keys(fails)
			
			var inpChats = document.getElementById("inpChats")
			var inpWorks = document.getElementById("inpWorks")
			var opStudents = document.getElementById("opStudents")
			var workAmount = document.getElementById("workAmount")

			function refreshScore() {

				let inpWorks = document.getElementById("inpWorks").valueAsNumber;
				if (isNaN(inpWorks)) {
					workAmount.innerHTML = "There are currently no classworks. Enter the amount of classworks to begin."
					for (i = 0; i < students.length; i ++) {
						document.getElementById("score" + students[i]).innerHTML = `${students[i]}: Enter the amount of classworks`
					}
					inpChats.disabled = true;
				}
				else if (inpWorks < 0)
					workAmount.innerHTML = "The work amount must be >= 0"
				else {
					workAmount.innerHTML = `There are currently ${inpWorks} classwork(s), resulting in a total of ${100 * inpWorks} points.`
					for (i = 0; i < students.length; i ++) {
						let maxScore = 100 * (inpWorks - fails[students[i]])
						document.getElementById("score" + students[i]).innerHTML = `${students[i]}: (Grade Losses: ${fails[students[i]]}, ${maxScore} รท ${inpWorks}) ${maxScore / inpWorks}`
					}
					inpChats.disabled = false;
				}
			}

			function refreshZero() {
				let zero = inpChats.valueAsNumber;
				if (isNaN(zero) || zero < 0) {
					zero = 0
				}
				fails[opStudents.value] = zero;
				refreshScore()
			}

			inpWorks.oninput = refreshScore
			inpChats.oninput = refreshZero
			
		</script>
	</body>
</html>

<!--
* Use the following format for web page names:
  UnitNum.TaskNum_TaskName_FirstName_Surname and use _ for spaces e.g. 01.01_Average_Joe_Bloggs
  Note the use of a capital to begin the TaskName.
* To change and access the contents of tags use .innerHTML but use .value for form elements.
  e.g. input, buttons, etc...
* No need for a form actually but you must give inputs an id.
* Must use input type = "number" when inputting numbers and access their contents using valueAsNumber.
* Use valueAsNumber to access the contents of form elements as numbers rather than text.
* Code clarity and "tidy" design: 
	* Pages should always begin with a h1 tag with UnitNum.TaskNum TaskName FirstName LastName.
	* Spaces before and after = and arithmetic operators (e.g. +, / etc...).
	* Indentation:
		* Tags within tags and function code lines.
		* Tag content if tags cannot start and end on the same line.
	* Tags should start and end on the same line if possible (without scrolling horizontally).
	* Use blank lines to separate code parts (e.g. instructions, input, output).
	* ids, function names & variable names must be short, meaningful and follow the camelCase format.
	* ids must begin with 3 lower case letters to indicate the element type 
	  e.g. "tag" for HTML tags, "inp" for input, etc...
	* However, types and keywords must be "as shown".
	* No unnecessary code and code is elegant (not unnecessarily complicated).
	* Use variables to help make calculations easily readable and understandable.
	* To declare variables I encourage the use of let rather than var as it is more in line with
	  how variables behave in other languages. 
-->